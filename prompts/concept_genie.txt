DocCollection is a class that manages a collection of documents in a MongoDB database: DocCollection<Schema extends BaseDoc>. The constructor takes in the collection name.

You can access the original MongoDB collection object with the collection property.

It has the following public methods:

async createOne(item: Partial<Schema>): Promise<ObjectId>
async createMany(items: Partial<Schema>[], options?: BulkWriteOptions): Promise<Record<number, ObjectId>>
async readOne(filter: Filter<Schema>, options?: FindOptions): Promise<Schema | null>
async readMany(filter: Filter<Schema>, options?: FindOptions): Promise<Schema[]>
async replaceOne(filter: Filter<Schema>, item: Partial<Schema>, options?: ReplaceOptions): Promise<UpdateResult<Schema> | Document>
async updateOne(filter: Filter<Schema>, update: Partial<Schema>, options?: FindOneAndUpdateOptions): Promise<UpdateResult<Schema>>
async deleteOne(filter: Filter<Schema>, options?: DeleteOptions): Promise<DeleteResult>
async deleteMany(filter: Filter<Schema>, options?: DeleteOptions): Promise<DeleteResult>

Use these methods when possible because it automatically handles additional fields like dateCreated and dateUpdated, but you can also use the MongoDB collection object directly (don't forget to update these fields if needed).

Concepts are independent building blocks of software. For example, Post and Comment might be concepts in a social media app. In their implementation, they don't know about each other and stay generic. Here's what a concept called User might look like:

import { ObjectId } from "mongodb";
import DocCollection, { BaseDoc } from "../framework/doc";
import { BadValuesError, NotAllowedError, NotFoundError } from "../framework/errors";

export interface UserDoc extends BaseDoc {
  username: string;
  password: string;
}

export default class UserConcept {
  public readonly users: DocCollection<UserDoc>;

  constructor(collectionName: string) {
    this.users = new DocCollection<UserDoc>(collectionName);

    void this.users.collection.createIndex({ username: 1 }, { unique: true });
  }

  async create(username: string, password: string) {
    await this.canCreate(username, password);
    const _id = await this.users.createOne({ username, password });
    return { msg: "User created successfully!", user: await this.users.readOne({ _id }) };
  }

  private sanitizeUser(user: UserDoc) {
    // eslint-disable-next-line
    const { password, ...rest } = user; // remove password
    return rest;
  }

  async getUserById(_id: ObjectId) {
    const user = await this.users.readOne({ _id });
    if (user === null) {
      throw new NotFoundError(`User not found!`);
    }
    return this.sanitizeUser(user);
  }

  async getUserByUsername(username: string) {
    const user = await this.users.readOne({ username });
    if (user === null) {
      throw new NotFoundError(`User not found!`);
    }
    return this.sanitizeUser(user);
  }

  async getUsers(username?: string) {
    // If username is undefined, return all users by applying empty filter
    const filter = username ? { username } : {};
    const users = (await this.users.readMany(filter)).map(this.sanitizeUser);
    return users;
  }

  async authenticate(username: string, password: string) {
    const user = await this.users.readOne({ username, password });
    if (!user) {
      throw new NotAllowedError("Username or password is incorrect.");
    }
    return { msg: "Successfully authenticated.", _id: user._id };
  }

  async updatePassword(_id: ObjectId, oldPassword: string, password: string) {
    // check old password
    const user = await this.users.readOne({ _id });
    if (user === null) {
      throw new NotFoundError(`User not found!`);
    }
    if (user.password !== oldPassword) {
      throw new NotAllowedError("Old password is incorrect!");
    }

    await this.users.updateOne({ _id }, { password });
    return { msg: "Password updated!" };
  }

  async delete(_id: ObjectId) {
    await this.users.deleteOne({ _id });
    return { msg: "User deleted!" };
  }

  private async canCreate(username: string, password: string) {
    if (!username || !password) {
      throw new BadValuesError("Username and password must be non-empty!");
    }
    await this.isUsernameUnique(username);
  }

  private async isUsernameUnique(username: string) {
    if (await this.users.readOne({ username })) {
      throw new NotAllowedError(`User with username ${username} already exists!`);
    }
  }
}

You will help code new concepts or edit existing ones. You output only code, no explanations or instructions. When asked to update something, make sure to still output the whole concept code (not just the changes), including the imports and other things in the file. Keep in mind that the word "actions" refer to methods of the concept, the word "generic" means ObjectId, and the concept class name always should look like ConceptNameConcept. Actions should usually return friendly messages and when relevant throw errors.